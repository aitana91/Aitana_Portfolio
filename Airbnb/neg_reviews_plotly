import pandas as pd
import numpy as np
import plotly.express as px
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc
import pickle
from datetime import datetime
import plotly.graph_objects as go
import nltk
from nltk.corpus import stopwords
import dash
import dash_core_components as dcc
import dash_html_components as html
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from tqdm import tqdm
from datetime import datetime, timedelta
import plotly.graph_objects as go
import pymongo
from pymongo import MongoClient


path = r"C:\Users\usuario\Desktop\Nebulova\Curso\Proyecto\Datos"
#Dataset uploaded
with open(r"C:\Users\usuario\Desktop\Nebulova\Curso\Proyecto\Datos\Pickles\sent_analysis_prepr.pk", "rb") as file:
    dataset = pickle.load(file)

with open(r"C:\Users\usuario\Desktop\Nebulova\Curso\Proyecto\Datos\Pickles\topic.pk", "rb") as file:
    topic = pickle.load(file)

with open(r"C:\Users\usuario\Desktop\Nebulova\Curso\Proyecto\Datos\Pickles\barrios.pk", "rb") as file:
    barrios = pickle.load(file)

#We will work just with the reviews of the last 12 months
value_to_check = pd.Timestamp(datetime.today() - timedelta(days = 365))
filter_mask = dataset['date'] > value_to_check
dataset = dataset[filter_mask]

import geojson
with open(path + "/distritos.geojson", encoding='utf-8') as json_file:
    json_data = geojson.load(json_file)

external_stylesheets = [dbc.themes.BOOTSTRAP]
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

class DashCallbackVariables:
    """Class to store information useful to callbacks"""

    def __init__(self):
        self.n_clicks = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0,
                         9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0,
                         17: 0, 18: 0, 19: 0, 20: 0, 21: 0, 22: 0, 23: 0, 24: 0, 25: 0}

    def update_n_clicks(self, nclicks, bt_num):
        self.n_clicks[bt_num] = nclicks

callbacks_vars = DashCallbackVariables()

# =============================================================================
# PLOTLY
# =============================================================================

mapeo_pr = pd.DataFrame([{"indexFunct" : 1, "button" : "btn-1", "issue" : "Troubles"},
                          {"indexFunct" : 2, "button" : "btn-2", "issue" : "Maintenance"},
                          {"indexFunct" : 3, "button" : "btn-3", "issue" : "Cleanliness"},
                          {"indexFunct" : 4, "button" : "btn-4", "issue" : "Noise"}])

mapeo = pd.DataFrame([{"indexFunct" : 5, "button" : "btn-5", "neigh" : "Arganzuela"},
                      {"indexFunct" : 6, "button" : "btn-6", "neigh" : "Centro"},
                      {"indexFunct" : 7, "button" : "btn-7", "neigh" : "Salamanca"},
                      {"indexFunct" : 8, "button" : "btn-8", "neigh" : "Fuencarral - El Pardo"},
                      {"indexFunct" : 9, "button" : "btn-9", "neigh" : "Chamberí"},
                      {"indexFunct" : 10, "button" : "btn-10", "neigh" : "Carabanchel"},
                      {"indexFunct" : 11, "button" : "btn-11", "neigh" : "Latina"},
                      {"indexFunct" : 12, "button" : "btn-12", "neigh" : "Tetuán"},
                      {"indexFunct" : 13, "button" : "btn-13", "neigh" : "Retiro"},
                      {"indexFunct" : 14, "button" : "btn-14", "neigh" : "Ciudad Lineal"},
                      {"indexFunct" : 15, "button" : "btn-15", "neigh" : "Barajas"},
                      {"indexFunct" : 16, "button" : "btn-16", "neigh" : "Moncloa - Aravaca"},
                      {"indexFunct" : 17, "button" : "btn-17", "neigh" : "Villa de Vallecas"},
                      {"indexFunct" : 18, "button" : "btn-18", "neigh" : "Chamartín"},
                      {"indexFunct" : 19, "button" : "btn-19", "neigh" : "Hortaleza"},
                      {"indexFunct" : 20, "button" : "btn-20", "neigh" : "Villaverde"},
                      {"indexFunct" : 21, "button" : "btn-21", "neigh" : "Moratalaz"},
                      {"indexFunct" : 22, "button" : "btn-22", "neigh" : "Puente de Vallecas"},
                      {"indexFunct" : 23, "button" : "btn-23", "neigh" : "San Blas - Canillejas"},
                      {"indexFunct" : 24, "button" : "btn-24", "neigh" : "Vicálvaro"},
                      {"indexFunct" : 25, "button" : "btn-25", "neigh" : "Usera"}])

mapeo_barrio = {x[1]["neigh"]: x[1]["button"] for x in mapeo.iterrows()}
mapeo_problemas = {x[1]["issue"]: x[1]["button"] for x in mapeo_pr.iterrows()}

app.layout = html.Div([
                        dbc.Row(dbc.Col(html.H2("Negative Reviews' location per topic", className="centered white"))),
                        dbc.Row([
                            dbc.Col(
                                    children=[
                                        html.H5(
                                            children = [
                                                html.Span(
                                                    "Topics:", style={
                                                        "font-weight": "bold", 'fontSize': 30, 'margin-right': '200px', 'margin-left': '15px'
                                                        }
                                                    )]
                                                ), 
                                        html.Div( 
                                                [html.Button(key, id=value, n_clicks=0, className='shadow rounded btn-lg btn-light mx-2 my-3 px-2 py-2') for key, value in mapeo_problemas.items()] 
                                        )]), 
                            dbc.Col(dcc.Graph(id='calor'), width=10)], className="d-flex-inline neigh"), 
                            
                        dbc.Row(dbc.Col(html.H2(children = [html.Span("Negative Reviews' location per Neighborhood", style={"font-weight": "bold", 'fontSize': 40})], className="centered white"))),
                        
                        dbc.Row([
                                dbc.Col(
                                    children=[
                                        html.H5(
                                            children = [
                                                html.Span(
                                                    "Select Neighborhood:", style={
                                                        "font-weight": "bold", 'fontSize': 30, 'margin-left': '15px', 'margin-right': '60px', 'margin-bottom': '90px'
                                                        }
                                                    )]
                                                ),  
                                            
                                        html.Div(        
                                            [html.Button(key, id=value, n_clicks=0, className='shadow rounded btn btn-light mx-2 my-3 px-2 py-2') for key, value in mapeo_barrio.items()]
                                        )]),  
        
                            dbc.Col(dcc.Graph(id='mapa'), width=9)], className="d-flex-inline neigh")
                    ], className="mainDiv widthDiv square")
    
inputs = [Input(component_id='btn-' + str(i), component_property='n_clicks') for i in range(5, 26)]
inputs.extend([Input(component_id='btn-' + str(i), component_property='n_clicks') for i in range(1, 5)])

@app.callback(
    [Output(component_id="mapa", component_property="figure"),
    Output(component_id="calor", component_property="figure")],
    inputs)

def update_figure(*buttons):
    mapbox_access_token = ####

    firstVis = buttons[:-4]
    data = dataset[dataset["neighbourhood_group_cleansed"] == 'Arganzuela']
    for i, bt in enumerate(firstVis):
        index = mapeo.iloc[i, 0]
        if int(bt) != callbacks_vars.n_clicks[index]:
            callbacks_vars.update_n_clicks(bt, index)
            data = dataset[dataset["neighbourhood_group_cleansed"] == mapeo.iloc[i, 2]] 
            break
        
    agrupado = data.groupby(['id_listing'], as_index = False)[["Result_Negative", "Result_Positive"]].sum()
    agrupado = agrupado[agrupado["Result_Negative"] > 0 ]
    agrupado = pd.merge(agrupado, dataset[["id_listing", "longitude", "latitude"]], 
                               left_on='id_listing', right_on='id_listing', how='left')
    
    fig1 = px.choropleth_mapbox(data, geojson=json_data,
                            locations="neighbourhood_group_cleansed", featureidkey="properties.nombre",
                            center={"lat": data["latitude"].mean(), "lon": data["longitude"].mean()},
                            mapbox_style="carto-positron", zoom=11)
    fig1.update_layout(transition_duration=500, height=900, margin={"r":10,"t":10,"l":10,"b":5})
    fig1.add_traces(go.Scattermapbox(
        lat=agrupado["latitude"],
        lon=agrupado["longitude"],
        mode='markers',
        marker=go.scattermapbox.Marker(
            size=9,
            color = "red"
        ),
        text=agrupado['id_listing'],
    ))

    fig1.update_layout(
        showlegend=False,
        autosize=True,
        mapbox=dict(
            accesstoken=mapbox_access_token,
            bearing=0,
            center=dict(
                lat=data["latitude"].mean(),
                lon=data["longitude"].mean()
            ),
            pitch=0,
            zoom=12))
    
    #Mapa de calor
    
    secondVis = buttons[-4:]
    temas = topic[topic["Topic"] == 'Noise']
    for i, bt in enumerate(secondVis):
        index = mapeo_pr.iloc[i, 0]
        if int(bt) != callbacks_vars.n_clicks[index]:
            callbacks_vars.update_n_clicks(bt, index)
            temas = topic[topic["Topic"] == mapeo_pr.iloc[i-1, 2]] 
            break
    
    agrupado_topic = temas.groupby(['id_listing'], as_index = False)[["Result_Negative", "Result_Positive"]].sum()
    agrupado_topic = agrupado_topic[agrupado_topic["Result_Negative"] > 0 ]
    agrupado_topic = pd.merge(agrupado_topic, dataset[["id_listing", "longitude", "latitude"]], 
                                left_on='id_listing', right_on='id_listing', how='left')
    
    fig3 = px.density_mapbox(agrupado_topic, lat='latitude', lon='longitude', z='Result_Negative', radius=10,
                        center=dict(lat=agrupado_topic["latitude"].mean(), lon=agrupado_topic["longitude"].mean()), 
                        zoom=11,
                        mapbox_style="carto-positron")
    fig3.update_layout(transition_duration=500, height=750, margin={"r":10,"t":15,"l":10,"b":5})

    return fig1, fig3

app.run_server(debug=True, use_reloader=True)
